# --------------------------- 1 ---------------------------
print('Task 1')
#Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
#В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
#Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.

from sys import argv

def salary():
    try:
        time, rate, bonus = map(float, argv[1:])
        print(f'Salary equals {time * rate + bonus}')
    except ValueError:
        print('Enter all 3 numbers without string or empty character')

salary()


# --------------------------- 2 ---------------------------
print('Task 2')
#Представлен список чисел. Необходимо вывести элементы исходного списка,
# значения которых больше предыдущего элемента.
#Подсказка: элементы, удовлетворяющие условию, оформить в виде списка.
# Для формирования списка использовать генератор.



# --------------------------- 3 ---------------------------
print('Task 3')
#Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
#Подсказка: использовать функцию range() и генератор.



# --------------------------- 4 ---------------------------
print('Task 4')
#Представлен список чисел. Определить элементы списка, не имеющие повторений.
# Сформировать итоговый массив чисел, соответствующих требованию.
# Элементы вывести в порядке их следования в исходном списке.
# Для выполнения задания обязательно использовать генератор.




# --------------------------- 5 ---------------------------
print('Task 5')
#Реализовать формирование списка, используя функцию range() и возможности генератора.
#В список должны войти четные числа от 100 до 1000 (включая границы).
#Необходимо получить результат вычисления произведения всех элементов списка.
#Подсказка: использовать функцию reduce().




# --------------------------- 6 ---------------------------
print('Task 6')
#Реализовать два небольших скрипта:
#а) итератор, генерирующий целые числа, начиная с указанного,
#б) итератор, повторяющий элементы некоторого списка, определенного заранее.
#Подсказка: использовать функцию count() и cycle() модуля itertools.
#Обратите внимание, что создаваемый цикл не должен быть бесконечным.
#Необходимо предусмотреть условие его завершения.
#Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл.
#Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.



# --------------------------- 7 ---------------------------
print('Task 7')
#Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
#При вызове функции должен создаваться объект-генератор.
#Функция должна вызываться следующим образом: for el in fact(n).
#Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел,
#начиная с 1! и до n!.
#Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.